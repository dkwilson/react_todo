{"version":3,"sources":["components/layout/Header.js","components/TodosItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodosItem","getStyle","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.530c8557.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <header style={ headerStyle }>\n            <h1>TodoList</h1>\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst linkStyle = {\n   color: '#fff',\n   textDecoration: 'none' \n}\n\nexport default Header;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodosItem extends Component {\n    getStyle = () => {\n        return {\n            background: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n        \n    }\n\n\n    \n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <div style={ this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> { \" \" }\n                    {title}\n                    <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>X</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n//PropTypes\nTodosItem.propTypes = {\n\n    todo: PropTypes.object.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n\n}\n\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff',\n    border: 'none',\n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor:'pointer',\n    float: 'right'\n\n}\n\nexport default TodosItem\n","import React, { Component } from 'react';\nimport TodoItem from './TodosItem';\nimport PropTypes from 'prop-types';\n\nclass Todos extends Component {\n\n    render() {\n        return this.props.todos.map((todo) => (\n            <TodoItem key={ todo.id } todo={ todo } markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\n        ));\n    }\n}\n\n//PropTypes\nTodos.propTypes = {\n\n    todos: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n\n}\n\nexport default Todos;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class AddTodo extends Component {\n    state = {\n        title: ''\n    }\n    onSubmit = (e) =>{\n        e.preventDefault();\n\n        this.props.addTodo(this.state.title);\n        this.setState({ title: \"\" });\n    }\n\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\n                <input \n                    type=\"text\" \n                    name=\"title\" \n                    style={{ flex: '10', padding: '5px'}}\n                    placeholder=\"Add Todo...\"\n                    value={this.state.title}\n                    onChange={this.onChange}\n                />\n                <input \n                    type=\"submit\" \n                    value=\"submit\" \n                    className=\"btn\"\n                    style={{ flex: '1' }}\n                />\n            </form>\n        )\n    }\n}\n\n//PropTypes\nAddTodo.propTypes = {\n\n    addTodo: PropTypes.func.isRequired\n\n}\n\nexport default AddTodo\n","import React from 'react'\n\nfunction About() {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is the todo list app v1.0.0. It is part of a React crash course.</p>\n        </React.Fragment>\n    )\n}\n\n\nexport default About;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Header from \"./components/layout/Header\";\nimport Todos from \"./components/Todos\";\nimport AddTodo from \"./components/AddTodo\";\nimport About from \"./components/pages/About\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport axios from 'axios';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(res => this.setState({ todos: res.data }));\n  }\n\n  //toggle complete\n  markComplete = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    });\n  };\n\n  //delete todo function\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({\n        todos: [...this.state.todos.filter(todo => todo.id !== id)]}));\n  };\n\n  //add Todo\n  addTodo = title => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed: false\n    }).then( res => this.setState({ todos: [...this.state.todos, res.data] }));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Router>\n          <Header />\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos\n                  todos={this.state.todos}\n                  markComplete={this.markComplete}\n                  delTodo={this.delTodo}\n                />\n              </React.Fragment>\n            )}/>\n            <Route path=\"/about\" component={About} />\n            </Router>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}